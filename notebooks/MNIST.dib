#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!markdown

# Graia MNIST digits example

#!fsharp

#r "nuget: Plotly.NET"
#r "nuget: Plotly.NET.Interactive"

open Plotly.NET

#!fsharp

// #r "../output/bin/Debug/net9.0/graia.dll" // to be used after `dotnet build` (dependencies included)
#load "../src/Graia.fs"
#load "../src/Tools.fs"

open Graia
open Tools

#!fsharp

// let labels, images = loadMnistCsvUnsafeOrder "datasets/mnist_train.csv"
let labels, images = loadMnistCsvUnsafeOrder "datasets/mnist_train_head.csv"
printfn $"Images: {Array.length images}"

#!fsharp

let model = init {
    inputBits = 28 * 28
    outputBytes = 10
    layerNodes = 128 * 8
    layers = 3
    seed = Some(123456)
}

#!fsharp

showLayerWeights "Initial Input Layer Weights" model.inputLayerWeights

#!fsharp

showLayerWeights "Initial Hidden Layer 0 Weights" model.hiddenLayersWeights[0]

#!fsharp

let bitArrayImages = byteRowsToBitArraysBinarized 200uy images

#!fsharp

let N = 1
model |> fit bitArrayImages[0..(N - 1)] labels[0..(N - 1)] 100
|> ignore

#!fsharp

showHistory model

#!fsharp

showLayerWeights "Input Layer Weights" model.inputLayerWeights

#!fsharp

for i in [0 .. model.hiddenLayersWeights.Length - 1] do
    showLayerWeights $"Hidden Layer {i} Weights" model.hiddenLayersWeights[i] |> ignore

#!fsharp

showLayerWeights "Output layer weights" model.outputLayerWeights

#!fsharp

printfn $"Last digit: {labels[N-1]}"
showRowDigit images[N-1]
showRowDigitBinarized 200uy images[N-1]

#!fsharp

showIntermediateOutputs "Last Intermediate Outputs" model.lastIntermediateOutputs

#!fsharp

showOutputs "Last Digit Choice" model.lastOutputs

#!markdown

## Test Procrastination

#!fsharp

open System.Collections

let minusBits = BitArray([| true; false; false; true |])
let plusBits  = BitArray([| true; true; false; false |])
let inputBits1 = BitArray(4).Not()
let inputBits0 = BitArray(4)

let active = getWeightBitsWithInput false [| Plus; Minus; Both; PlusOnly; MinusOnly; NoBits |] inputBits0 (plusBits, minusBits)

// inhibitNodeWeightsWithInput true inputBits1 (plusBits, minusBits)
// inhibitNodeWeightsWithInput true inputBits1 (plusBits, minusBits)
// printfn "%A" minusBits
// printfn "%A" plusBits

printfn "\n%A" active
