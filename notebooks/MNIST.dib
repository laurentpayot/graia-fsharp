#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!fsharp

#r "nuget: Plotly.NET"
#r "nuget: Plotly.NET.Interactive"
#r "nuget: Walrus"
#r "nuget: FSharpPlus"

open Plotly.NET
open Walrus
open FSharpPlus

#!fsharp

// #r "../output/bin/Debug/net8.0/graia.dll" // to be used after `dotnet build` (dependencies included)
#load "../src/Graia.fs"
// #load "../src/Tools.fs"

open Graia
// open Tools

#!fsharp

// let labels, images = loadMnistCsv "datasets/mnist_train_head.csv"
// printfn $"Images: {Seq.length images}"
let df = Table.loadCsvFile "datasets/mnist_train_head.csv"
// printfn $"Samples: {df.RowCount}"
let labels = df?label

// let images = Table.ofColumns [1..] df
// labels.Values

#!fsharp

images[5]
|> Seq.map (fun x -> if x >= 200 then 1 else 0)
|> Seq.chunkBySize 28
|> Seq.rev
|> Chart.Heatmap
|> Chart.withSize(240.,200.)
|> Chart.withTitle "MNIST digit"
|> Chart.withMarginSize(10.,10.,30.,10.)

#!fsharp

let model = modelInit {
    inputs = 28*28
    outputs = 10
    layerNodes = 128
    layers = 3
    seed = Some(123456)
}
